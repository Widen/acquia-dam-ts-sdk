// Generated by ts-to-zod
import { z } from 'zod'

export const addDeliverableResultSchema = z.object({
  deliverable_id: z.string(),
  id: z.string(),
  project_id: z.string(),
})

export const createProjectResultSchema = z.object({
  project_id: z.string(),
})

export const workflowUserSchema = z.object({
  email_address: z.string(),
  first_name: z.string(),
  last_name: z.string(),
})

export const getProjectResultSchema = z.object({
  _links: z.object({
    deliverables: z.string(),
    self: z.string(),
    support_files: z.string(),
  }),
  deliverables: z.array(
    z.object({
      due_date: z.date(),
      id: z.string(),
      name: z.string(),
      status: z.string(),
    })
  ),
  description: z.string(),
  due_date: z.date(),
  expanded: z.object({
    request_fields: z.boolean(),
  }),
  id: z.string(),
  name: z.string(),
  project_id: z.string(),
  project_manager: workflowUserSchema,
  start_date: z.date(),
})

export const getDeliverableResultSchema = z.object({
  _links: z.object({
    download: z.string().optional(),
    project: z.string(),
    self: z.string(),
  }),
  deliverable_id: z.string(),
  deliverable_manager: workflowUserSchema,
  description: z.string().optional(),
  due_date: z.date(),
  expanded: z.object({
    download_link: z.boolean(),
    file_properties: z.boolean(),
    proof_url: z.boolean(),
  }),
  file_properties: z
    .object({
      file_type: z.string(),
      filename: z.string(),
      sizes_in_bytes: z.number(),
    })
    .optional(),
  id: z.string(),
  name: z.string(),
  proof_provider: workflowUserSchema,
  proof_url: z.string().optional(),
  status: z.string(),
  thumbnails: z
    .object({
      large: z.string(),
      medium: z.string(),
      small: z.string(),
    })
    .optional(),
})

export const uploadProofResultSchema = z.object({
  deliverable_id: z.string(),
  id: z.string(),
  project_id: z.string(),
  status: z.string(),
  thumbnails: z.object({
    large: z.string(),
    medium: z.string(),
    small: z.string(),
  }),
})

export const supportingFileSchema = z.object({
  _links: z.object({
    download: z.string(),
    project: z.string(),
    self: z.string(),
  }),
  format_type: z.string(),
  id: z.string(),
  name: z.string(),
  size_in_bytes: z.number(),
  upload_date: z.date(),
  uploader: workflowUserSchema,
})

export const getSupportingFilesResultSchema = z.array(supportingFileSchema)

export const deliverableSchema = getDeliverableResultSchema

export const projectSchema = getProjectResultSchema

export const listDeliverablesResultSchema = z.object({
  items: z.array(getDeliverableResultSchema),
})
