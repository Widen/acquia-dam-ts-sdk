// Generated by ts-to-zod
import { z } from 'zod'

export const completeChunkedUploadResultSchema = z.object({
  file_id: z.string(),
})

export const createdAssetSchema = z.object({
  _links: z.object({
    self: z.string(),
  }),
})

export const createAssetResultSchema = createdAssetSchema.extend({
  id: z.string().nullable(),
})

export const assetPropertiesExpandSchema = z.object({
  cutline_caption: z.string(),
  favorite: z.boolean(),
  popularity: z.number(),
})

export const filePropertiesExpandSchema = z.object({
  format: z.string(),
  format_type: z.string(),
  image_properties: z
    .object({
      aspect_ratio: z.number(),
      height: z.number().nullable(),
      width: z.number().nullable(),
    })
    .nullable(),
  size_in_bytes: z.number(),
  size_in_kbytes: z.number(),
  video_properties: z
    .object({
      aspect_ratio: z.number().nullable(),
      duration: z.number().nullable(),
      height: z.number().nullable(),
      width: z.number().nullable(),
    })
    .nullable(),
})

export const statusExpandSchema = z.object({
  upload_progress: z.union([
    z.literal('pending'),
    z.literal('verifying'),
    z.literal('complete'),
  ]),
})

export const getMetadataResultSchema = z.object({
  fields: z.record(z.array(z.string())),
})

export const getSecurityResultSchema = z.object({
  asset_groups: z.array(z.string()),
  expiration_date: z.date().nullable(),
  release_date: z.date().nullable(),
})

export const listAssetGroupsResultSchema = z.object({
  item_type: z.string(),
  items: z.array(
    z.object({
      name: z.string(),
      uuid: z.string(),
    })
  ),
  total_count: z.number(),
})

export const listIntegrationLinksResultSchema = z.object({
  integrationLinks: z.array(
    z.object({
      assetUuid: z.string(),
      description: z.string(),
      updatedDate: z.date(),
      url: z.string().nullable(),
      uuid: z.string(),
    })
  ),
})

export const uploadProfileSchema = z.object({
  asset_groups: z.array(z.string()),
  immediate_release: z.boolean(),
  name: z.string(),
  release_date: z.date().nullable(),
})

export const listFileFormatsResultSchema = z.object({
  count: z.number(),
  formats: z.array(
    z.object({
      description: z.string(),
      name: z.string(),
    })
  ),
})

export const listVersionsResultSchema = z.object({
  numResults: z.number(),
  uuid: z.string(),
  versions: z.array(
    z.object({
      dateAdded: z.date(),
      dateLastEdited: z.date(),
      externalId: z.string(),
      fileFormat: z.string(),
      finalized: z.boolean(),
      name: z.string(),
      previews: z.object({
        preview125: z.string(),
        preview160: z.string(),
        preview300: z.string(),
        preview600: z.string(),
        preview2048: z.string(),
        templated: z.string(),
      }),
      size: z.string(),
      type: z.string(),
      uuid: z.string(),
      versionNumber: z.number(),
    })
  ),
})

export const registerIntegrationLinkResultSchema = z.object({
  assetUuid: z.string(),
  description: z.string(),
  updatedDate: z.date(),
  url: z.string().nullable(),
  uuid: z.string(),
})

export const categoryFacetSchema = z.object({
  count: z.number(),
  id: z.string(),
  name: z.string(),
  path: z.string(),
  search_query: z.string(),
})

export const fileTypeFacetSchema = z.object({
  count: z.number(),
  name: z.string(),
  search_query: z.string(),
})

export const metadataFacetSchema = z.object({
  display_key: z.string(),
  display_name: z.string(),
  values: z.array(
    z.object({
      count: z.number(),
      search_query: z.string(),
      value: z.string().optional(),
      values: z.array(z.string()).optional(),
    })
  ),
})

export const thumbnailSchema = z.object({
  url: z.string(),
  valid_until: z.date(),
})

export const startChunkedUploadResultSchema = z.object({
  session_id: z.string(),
})

export const uploadChunkResultSchema = z.object({
  tag: z.string(),
})

export const thumbnailsExpandSchema = z.object({
  '125px': thumbnailSchema,
  '160px': thumbnailSchema,
  '300px': thumbnailSchema,
  '600px': thumbnailSchema,
  '2048px': thumbnailSchema,
})

export const listUploadProfilesResultSchema = z.array(uploadProfileSchema)

export const metadataExpandSchema = getMetadataResultSchema

export const securityExpandSchema = getSecurityResultSchema

const metadataFieldTypeSchema = z.any()

export const metadataInfoExpandSchema = z.object({
  field_set: z.string(),
  field_set_fields: z.array(
    z.object({
      controlled_vocabulary: z.boolean(),
      editable: z.boolean(),
      field_type: metadataFieldTypeSchema,
      key: z.string(),
      label: z.string(),
      required: z.boolean(),
      type: metadataFieldTypeSchema,
      vocabulary: z.array(z.string()).nullable(),
    })
  ),
})

export const getAssetResultSchema = z.object({
  _links: z.object({
    download: z.string().optional(),
  }),
  asset_properties: assetPropertiesExpandSchema.nullable(),
  created_date: z.date(),
  current_version: z.boolean(),
  deleted_date: z.date().nullable(),
  embeds: z.null(),
  expanded: z.object({
    asset_properties: z.boolean(),
    download_link: z.boolean().optional(),
    file_properties: z.boolean(),
    metadata: z.boolean(),
    metadata_info: z.boolean(),
    metadata_vocabulary: z.boolean(),
    security: z.boolean(),
    thumbnails: z.boolean(),
  }),
  external_id: z.string(),
  file_properties: filePropertiesExpandSchema.nullable(),
  file_upload_date: z.date(),
  filename: z.string(),
  id: z.string(),
  last_update_date: z.date(),
  metadata: metadataExpandSchema.nullable(),
  metadata_info: metadataInfoExpandSchema.nullable(),
  released_and_not_expired: z.boolean(),
  security: securityExpandSchema.nullable(),
  status: statusExpandSchema.nullable(),
  thumbnails: thumbnailsExpandSchema.nullable(),
  version_id: z.string(),
})

export const assetSchema = getAssetResultSchema

export const searchAssetsResultSchema = z.object({
  facets: z
    .object({
      categories: z.array(categoryFacetSchema).optional(),
      file_types: z.array(fileTypeFacetSchema).optional(),
      metadata: z.array(metadataFacetSchema).optional(),
    })
    .nullable(),
  include_archived: z.boolean(),
  include_deleted: z.boolean(),
  item_type: z.string(),
  items: z.array(getAssetResultSchema),
  limit: z.number(),
  offset: z.number(),
  query: z.string().nullable(),
  query_explained: z.string(),
  query_syntax_ok: z.boolean(),
  scroll_id: z.string().nullable(),
  scroll_timeout: z.string().nullable(),
  sort: z.string(),
  sort_explained: z.string(),
  total_count: z.number(),
})
