// Generated by ts-to-zod
import { z } from 'zod'

export const getMetadataFieldValueResultSchema = z.object({
  _links: z.object({
    self: z.string(),
    vocabulary: z.string(),
  }),
  index: z.number(),
  value: z.string(),
})

export const listFieldValuesResultSchema = z.object({
  _links: z.object({
    self: z.string(),
  }),
  vocabulary: z.array(z.string()),
})

export const listMetadataTypesResultSchema = z.object({
  types: z.array(
    z.object({
      fields: z.array(
        z.object({
          discriminator: z.string(),
          displayKey: z.string(),
          displayName: z.string(),
          editable: z.boolean(),
          itemList: z
            .object({
              items: z.array(
                z.object({
                  displayName: z.string(),
                  uuid: z.string(),
                })
              ),
            })
            .optional(),
          required: z.boolean(),
          uuid: z.string(),
        })
      ),
      name: z.string(),
      use: z.string(),
      uuid: z.string(),
    })
  ),
})

const metadataFieldTypeSchema = z.any()

export const listViewableMetadataFieldsResultSchema = z.object({
  fields: z.array(
    z.object({
      display_key: z.string(),
      display_name: z.string(),
      field_type: metadataFieldTypeSchema,
      metadata_types: z.array(z.string()),
    })
  ),
})
