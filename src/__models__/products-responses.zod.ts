// Generated by ts-to-zod
import { z } from 'zod'
import { type ProductCategory } from './../apis/products/responses'

export const createProductResultSchema = z.object({
  product_id: z.string(),
})

export const attributeSchema = z.object({
  attribute_group: z
    .object({
      attribute_group_id: z.string(),
      name: z.string(),
    })
    .optional()
    .nullable(),
  attribute_id: z.string(),
  import_only: z.boolean().nullable(),
  name: z.string(),
  type: z.string(),
  values: z.array(z.string()),
})

export const productCategorySchema: z.ZodSchema<ProductCategory> = z.lazy(() =>
  z.object({
    name: z.string(),
    product_category_id: z.string(),
    sub_category: productCategorySchema.nullable(),
  })
)

export const listChannelsResultSchema = z.object({
  item_type: z.string(),
  items: z.array(
    z.object({
      channel_id: z.string(),
      name: z.string(),
    })
  ),
  limit: z.number(),
  offset: z.number(),
  total_count: z.number(),
})

export const getProductResultSchema = z.object({
  attributes: z.record(attributeSchema).nullable(),
  created_date: z.date(),
  featured_image: z
    .object({
      id: z.string(),
      url: z.string(),
    })
    .nullable(),
  last_updated_timestamp: z.date(),
  name: z.string(),
  parent_product: z
    .object({
      parent_product_id: z.string(),
    })
    .nullable(),
  product_categories: z.object({
    product_categories: z.array(productCategorySchema),
  }),
  product_id: z.string(),
  product_type: z
    .object({
      name: z.string(),
      product_type_id: z.string(),
    })
    .nullable(),
  sku: z.string(),
})

export const listProductCategoriesResultSchema = z.object({
  item_type: z.string(),
  items: z.array(
    z.object({
      name: z.string(),
      product_category_id: z.string(),
    })
  ),
  limit: z.number(),
  offset: z.number(),
  total_count: z.number(),
})

export const listProductTypesResultSchema = z.object({
  item_type: z.string(),
  items: z.array(
    z.object({
      name: z.string(),
      product_type_id: z.string(),
    })
  ),
  limit: z.number(),
  offset: z.number(),
  total_count: z.number(),
})

export const productSchema = getProductResultSchema

const productSearchFilterSchema = z.any()

const productSortSchema = z.any()

export const listProductsByChannelResultSchema = z.object({
  channel_id: z.string(),
  channel_name: z.string(),
  item_type: z.string(),
  items: z.array(getProductResultSchema),
  limit: z.number(),
  offset: z.number(),
  total_count: z.number(),
})

export const searchProductsResultSchema = z.object({
  expanded: z.object({
    attributes: z.boolean().optional(),
  }),
  filters: z.array(productSearchFilterSchema),
  item_type: z.string(),
  items: z.array(getProductResultSchema),
  limit: z.number(),
  offset: z.number(),
  query: z.string().nullable(),
  sort: productSortSchema,
  total_count: z.number(),
})
